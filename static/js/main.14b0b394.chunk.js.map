{"version":3,"sources":["constants.js","components/Header.js","components/MovieSelect.js","components/MovieForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["posterSizes","imgUrl","constants","API_TOKEN","process","API_URL","getPosterUrl","filename","posterSize","includes","concat","getBackdropUrl","Header","react_default","a","createElement","className","this","props","containerClass","href","onClick","scrollToRef","Component","MovieSelect","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeQuery","event","handleSelect","setState","q","target","value","state","length","autocompleteSearchThrottled","autocompleteSearchDebounced","autocompleteSearch","fetchMatches","_searches","push","fetchMovies","autoCompleteid","id","debounce","throttle","selected","recomendations","results","fetchSelectedMovie","bind","assertThisInitialized","matched","console","log","input","inputValue","list","getAttribute","options","document","querySelectorAll","toConsumableArray","selectedId","matchedOption","filter","option","movieId","dataset","fetchRecomendations","qUrl","config","qParams","crossDomain","api_key","query","page","include_adult","axios","get","params","movieData","movies","data","error","_context","t0","message","url","setMovieChoice","_context2","params2","recomendationData","recomendationData2","recomendations1","recomendations2","setRecommendations","_context3","backgroundImage","backdrop_path","map","result","title","date","release_date","year","parseInt","key","data-value","style","renderBackground","renderBlank","placeholder","type","onChange","renderSearchResults","MovieForm","selectedMovieA","selectedMovieB","recommendationsA","recommendationsB","RecommendedMovie","setMovieChoiceA","setMovieChoiceB","setRecommendationsA","setRecommendationsB","recommend","movie","recommendations","b","matches","forEach","e1","e2","JSON","stringify","_this$state","getSharedReccomendations","getElementById","scrollIntoView","posterUrl","poster_path","src","alt","overview","components_Header","components_MovieSelect","renderRecommendation","loadingRecommendation","Footer","App","appConfig","configData","components_MovieForm","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14b0b394.chunk.js","sourcesContent":["export const API_TOKEN = process.env.REACT_APP_API_KEY;\nexport const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const posterSizes = [\"w92\",\"w154\",\"w185\",\"w342\",\"w500\",\"w780\",\"original\"];\nexport const imgUrl = 'http://image.tmdb.org/t/p/';\n\nfunction getPosterUrl(filename) {\n  let posterSize = \"w780\"\n  if(!posterSizes.includes('w780')){\n    posterSize = \"w780\";\n  }\n  return `${imgUrl}${posterSize}${filename}`;\n} \nfunction getBackdropUrl(filename) {\n  let backgroundSize = \"w1280\"\n  // if(!backgroundSizes.includes('w1280')){\n  //   backgroundSize = \"w780\";\n  // }\n  return `${imgUrl}${backgroundSize}/${filename}`;\n} \n\nexport default { API_TOKEN, API_URL, getPosterUrl, getBackdropUrl }\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return(\n    <header className={this.props.containerClass }>\n      <h1>Movie Mashup</h1>\n      <p>Pick two movies and Movie Mashup will recomend a movie based on your selections!</p>\n      <a className=\"start-button\" href=\"#selectOne\" onClick={ this.props.scrollToRef }>Start</a>\n    </header>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { throttle, debounce } from 'throttle-debounce';\nimport config from '../constants';\n\n\nclass MovieSelect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.autoCompleteid = \"autocomplete-\"+props.id\n\n    this.autocompleteSearchDebounced = debounce(300, this.autocompleteSearch);\n    this.autocompleteSearchThrottled = throttle(300, this.autocompleteSearch);\n\n    this.state = { \n      q: null,\n      selected: null,\n      recomendations:[],\n      results:[]\n    };\n    this.fetchSelectedMovie = this.fetchSelectedMovie.bind(this);\n  }\n  changeQuery = event => {\n    this.handleSelect(event)\n    this.setState(\n      { q: event.target.value },\n      () => {\n        const q = this.state.q;\n        if(q.length < 5) {\n          this.autocompleteSearchThrottled(this.state.q);\n        } else {\n          this.autocompleteSearchDebounced(this.state.q);\n        }\n      }\n    )\n  }\n  matchedMovies(matched) {\n    // pick selected movie\n    console.log(this.state.results);\n  }\n  handleSelect(event) {\n    const input = event.target\n    const inputValue = input.value;\n    const list = input.getAttribute('list')\n    let options = document.querySelectorAll('#' + list + ' option')\n    options = [...options]\n    let selectedId = null;\n    let matchedOption = null;\n\n    //console.log(options);\n\n    selectedId = options.filter(option => {\n      //console.log(option.value + \" \" + inputValue)\n      if(option.value === inputValue){\n        matchedOption = option\n      }\n      return matchedOption\n    })\n    if(selectedId.length){\n      const movieId = selectedId[0].dataset.value\n      \n      this.fetchSelectedMovie(movieId)\n      this.fetchRecomendations(movieId)\n    }\n  }\n  setSelected(selected){\n    this.setState({ selected })\n  }\n  setRecommendations(recomendations){\n    this.setState({ recomendations })\n  }\n  autocompleteSearch = q => {\n    this.fetchMatches(q);\n  }\n  fetchMatches = q => {\n    const _searches = this.state._searches || [];\n    _searches.push(q);\n    this.setState({_searches});\n\n    this.fetchMovies(q);\n  }\n  async fetchMovies (q) {\n    try {\n      const qUrl = `${config.API_URL}/search/movie`;\n      const qParams = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        query: q,\n        page: 1,\n        include_adult: false\n      }\n      if(q.length){\n        const movieData = await axios.get(qUrl, {params: qParams})\n        const { results: movies } = movieData.data;\n\n        this.setState({results: movies})\n      }\n\n\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  async fetchSelectedMovie(id){\n    try {\n      const url = `${config.API_URL}/movie/${id}`;\n      const params = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        include_adult: false\n      }\n\n      const movieData = await axios.get(url, {params: params})\n      const { data:selected } = movieData;\n      this.setState({ selected })\n      this.props.setMovieChoice(selected)\n\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  async fetchRecomendations(id, page) {\n    try {\n      const url = `${config.API_URL}/movie/${id}/recommendations`;\n      page = page !== null ? page : 1;\n      const params = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        page: 1,\n        include_adult: false\n      }\n      const params2 = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        page: 2,\n        include_adult: false\n      }\n      // get the first two pages of recommendations\n      const recomendationData = await axios.get(url, {params: params})\n      const recomendationData2 = await axios.get(url, {params: params2})\n      const { results:recomendations1 } = recomendationData.data;\n      const { results:recomendations2 } = recomendationData2.data;\n      const recomendations = [...recomendations1,...recomendations2];\n      this.setState({ recomendations })\n      this.props.setRecommendations(recomendations)\n  \n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  renderBlank(){\n    return ({'backgroundImage':'none'})\n  }\n  renderBackground(){\n    const {backdrop_path } = this.state.selected;\n    const backgroundImage = config.getBackdropUrl(backdrop_path);\n    console.log(backgroundImage);\n    return ({'backgroundImage': `url(${backgroundImage})`})\n  }\n  renderSearchResults() {\n    const { results } = this.state;\n    const resultsHtml = results.map(result => {\n      const {\n        id,\n        title,\n        release_date: date\n      } = result;\n      const year = parseInt(date);\n\n      return (\n        <option key={id} data-value={id} value={`${title} (${year})`} /> \n      )\n    })\n    return resultsHtml;\n  }\n  render() {\n    return (\n      <div className={this.props.containerClass }>\n        <div className=\"background\" style={ this.state.selected !== null ? this.renderBackground() : this.renderBlank() }></div>\n        <input\n          placeholder={ this.props.placeholder }\n          type=\"text\"\n          list={this.autoCompleteid }\n          onChange={ this.changeQuery }\n        /> \n        <datalist className=\"movieAutocomplete\" id={ this.autoCompleteid }>\n        { this.renderSearchResults() }\n        </datalist> \n      </div>\n    )\n  }\n}\n\nexport default MovieSelect;","import React, { Component } from 'react';\nimport config from '../constants';\n\n\nimport Header from './Header';\nimport MovieSelect from './MovieSelect';\n\nclass MovieForm extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      selectedMovieA: null,\n      selectedMovieB: null,\n      recommendationsA: [],\n      recommendationsB: [],\n      RecommendedMovie: null\n    }\n\n    this.setMovieChoiceA = this.setMovieChoiceA.bind(this)\n    this.setMovieChoiceB = this.setMovieChoiceB.bind(this)\n    this.setRecommendationsA = this.setRecommendationsA.bind(this)\n    this.setRecommendationsB = this.setRecommendationsB.bind(this)\n  }\n  componentDidUpdate(){\n    if(this.state.recommendationsA.length && this.state.recommendationsB.length && this.state.RecommendedMovie === null){\n      this.recommend();\n    }\n  }\n  setMovieChoiceA(movie){\n    this.setState({\n      selectedMovieA: movie\n    })\n  }\n  setMovieChoiceB(movie){\n    this.setState({\n      selectedMovieB: movie\n    })\n  }\n  setRecommendationsA(recommendations){\n    this.setState({\n      recommendationsA: recommendations\n    })\n  }\n  setRecommendationsB(recommendations){\n    this.setState({\n      recommendationsB: recommendations\n    })\n  }\n  loadingRecommendation(){\n    return(\n      <div className=\"loading-recommendation\">Loading</div>\n    )\n  }\n  getSharedReccomendations(a,b){\n\n    const matches = [];\n    console.log(a, b);\n    a.forEach((e1) => b.forEach((e2) => {\n      if( JSON.stringify(e1) === JSON.stringify(e2)) {\n        matches.push(e1);\n      }\n    }))\n\n    if(!matches.length){\n      // if they have no matches \n      matches.push(a[0])\n      matches.push(b[0])\n    }\n\n    return matches\n  }\n\n  recommend() {\n    console.log(\"analyzing..\")\n\n    const { recommendationsA, recommendationsB} = this.state;\n    const matches = this.getSharedReccomendations(recommendationsA, recommendationsB)\n\n    this.setState({\n      RecommendedMovie: matches[0]\n    })\n  }\n  renderRecommendation(){\n    const recommendationPanel = document.getElementById(\"recommendation\");\n    recommendationPanel.scrollIntoView();\n\n    const movie = this.state.RecommendedMovie;\n    const posterUrl = config.getPosterUrl(movie.poster_path)\n\n    return (\n      <div className=\"result\">\n        <h3>You should watch:</h3>\n        <img src={ posterUrl } alt={movie.title}/>\n        <h2>{movie.title}</h2>\n        <p>{ movie.overview }</p>\n      </div>\n    )\n  }\n  render(){\n    return(\n      <form>\n        <div className=\"panel\">\n          <Header \n          containerClass={\"container\"}/>\n        </div>\n        <div className=\"panel panel-half\" id=\"selectOne\">\n          <MovieSelect\n          id={1}\n          placeholder={\"Pick a Movie\"}\n          setMovieChoice={ this.setMovieChoiceA }\n          setRecommendations={ this.setRecommendationsA }\n          containerClass={\"moviePicker container container-red\"}\n          />\n        </div>\n        <div className=\"panel panel-half\">\n          <MovieSelect\n          id={2} \n          placeholder={\"Pick another Movie\"}\n          setMovieChoice={ this.setMovieChoiceB }\n          setRecommendations={ this.setRecommendationsB }\n          containerClass={\"moviePicker container container-cyan\"}\n          />\n        </div>\n        <div className=\"panel\" id=\"recommendation\">\n          <div className=\"container\">\n            { this.state.RecommendedMovie !== null ? this.renderRecommendation(): this.loadingRecommendation() }\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default MovieForm;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return(\n    <footer>\n      <p>&copy; Steven Moran 2019</p>\n    </footer>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport appConfig from './constants.js';\n\nimport './App.scss';\n\nimport MovieForm from './components/MovieForm';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  componentDidMount() {\n    //this.getConfig();\n  }\n  async getConfig() {\n\n    try {\n      const qUrl = `${appConfig.API_URL}/configuration`;\n      const qParams = {\n        crossDomain: true,\n        api_key: appConfig.API_TOKEN\n      }\n      const configData = await axios.get(qUrl, {params: qParams})\n\n      console.log(configData)\n\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  render() {\n    return (\n      <div>\n        <MovieForm />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}