{"version":3,"sources":["constants.js","components/Header.js","components/MovieSelect.js","components/MovieForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["posterSizes","imgUrl","constants","API_TOKEN","process","API_URL","getPosterUrl","filename","posterSize","includes","concat","getBackdropUrl","Header","react_default","a","createElement","className","this","props","containerClass","href","onClick","scrollToRef","Component","MovieSelect","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeQuery","event","handleSelect","setState","q","target","value","state","length","autocompleteSearchThrottled","autocompleteSearchDebounced","input","inputValue","list","getAttribute","options","document","querySelectorAll","toConsumableArray","selectedId","matchedOption","filter","option","movieId","dataset","fetchSelectedMovie","fetchRecommendations","autocompleteSearch","fetchMatches","_searches","push","fetchMovies","autoCompleteid","id","debounce","throttle","results","bind","assertThisInitialized","qUrl","config","qParams","crossDomain","api_key","query","page","include_adult","axios","get","params","movieData","movies","data","console","error","_context","t0","message","url","selected","setMovieChoice","_context2","params2","recommendationData","recommendationData2","recommendations1","recommendations2","recommendations","setRecommendations","_context3","backgroundImage","backdrop_path","selectedMovie","map","result","title","date","release_date","year","parseInt","key","data-value","style","renderBackground","renderBlank","placeholder","type","onChange","renderSearchResults","MovieForm","_reset","preventDefault","selectedMovieA","selectedMovieB","recommendationsA","recommendationsB","recommendedMovie","querySelector","scrollIntoView","setMovieChoiceA","setMovieChoiceB","setRecommendationsA","setRecommendationsB","recommend","movie","b","matches","forEach","e1","e2","JSON","stringify","log","_this$state","getSharedReccomendations","getElementById","posterUrl","poster_path","src","alt","overview","_this2","components_Header","components_MovieSelect","renderRecommendation","loadingRecommendation","Footer","App","appConfig","configData","components_MovieForm","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34a27da6.chunk.js","sourcesContent":["export const API_TOKEN = process.env.REACT_APP_API_KEY;\nexport const API_URL = \"https://api.themoviedb.org/3\";\n\nexport const posterSizes = [\"w92\",\"w154\",\"w185\",\"w342\",\"w500\",\"w780\",\"original\"];\nexport const imgUrl = 'http://image.tmdb.org/t/p/';\n\nfunction getPosterUrl(filename) {\n  let posterSize = \"w780\"\n  if(!posterSizes.includes('w780')){\n    posterSize = \"w780\";\n  }\n  return `${imgUrl}${posterSize}${filename}`;\n} \nfunction getBackdropUrl(filename) {\n  let backgroundSize = \"w1280\"\n\n  return `${imgUrl}${backgroundSize}/${filename}`;\n} \n\nexport default { API_TOKEN, API_URL, getPosterUrl, getBackdropUrl }\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return(\n    <header className={this.props.containerClass }>\n      <h1>Movie Mashup</h1>\n      <p>Pick two movies and Movie Mashup will recomend a movie based on your selections!</p>\n      <a className=\"start-button\" href=\"#selectOne\" onClick={ this.props.scrollToRef }>Start</a>\n    </header>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { throttle, debounce } from 'throttle-debounce';\nimport config from '../constants';\n\n\nclass MovieSelect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.autoCompleteid = \"autocomplete-\"+props.id\n\n    this.autocompleteSearchDebounced = debounce(300, this.autocompleteSearch);\n    this.autocompleteSearchThrottled = throttle(300, this.autocompleteSearch);\n\n    this.state = { \n      q: '',\n      _searches:null,\n      results:[],\n    };\n    this.fetchSelectedMovie = this.fetchSelectedMovie.bind(this);\n  }\n  changeQuery = event => {\n    this.handleSelect(event)\n    this.setState(\n      { q: event.target.value },\n      () => {\n        const q = this.state.q;\n        if(q.length < 5) {\n          this.autocompleteSearchThrottled(this.state.q);\n        } else {\n          this.autocompleteSearchDebounced(this.state.q);\n        }\n      }\n    )\n  }\n  handleSelect = event => {\n    const input = event.target\n    const inputValue = input.value;\n    const list = input.getAttribute('list')\n    let options = document.querySelectorAll('#' + list + ' option')\n    options = [...options]\n    let selectedId = null;\n    let matchedOption = null;\n\n    selectedId = options.filter(option => {\n      if(option.value === inputValue){\n        matchedOption = option\n      }\n      return matchedOption\n    })\n    if(selectedId.length){\n      const movieId = selectedId[0].dataset.value\n      \n      this.fetchSelectedMovie(movieId)\n      this.fetchRecommendations(movieId)\n    }\n  }\n  autocompleteSearch = q => {\n    this.fetchMatches(q);\n  }\n  fetchMatches = q => {\n    const _searches = this.state._searches || [];\n    _searches.push(q);\n    this.setState({_searches});\n\n    this.fetchMovies(q);\n  }\n  async fetchMovies (q) {\n    try {\n      const qUrl = `${config.API_URL}/search/movie`;\n      const qParams = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        query: q,\n        page: 1,\n        include_adult: false\n      }\n      if(q.length){\n        const movieData = await axios.get(qUrl, {params: qParams})\n        const { results: movies } = movieData.data;\n\n        this.setState({results: movies})\n      }\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  async fetchSelectedMovie(id){\n    try {\n      const url = `${config.API_URL}/movie/${id}`;\n      const params = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        include_adult: false\n      }\n\n      const movieData = await axios.get(url, {params: params})\n      const { data:selected } = movieData;\n      this.props.setMovieChoice(selected)\n\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  async fetchRecommendations(id, page) {\n    try {\n      const url = `${config.API_URL}/movie/${id}/recommendations`;\n      page = page !== null ? page : 1;\n      const params = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        page: 1,\n        include_adult: false\n      }\n      const params2 = {\n        crossDomain: true,\n        api_key: config.API_TOKEN,\n        page: 2,\n        include_adult: false\n      }\n      // get the first two pages of recommendations\n      // TODO Find a better way to get both\n      const recommendationData = await axios.get(url, {params: params})\n      const recommendationData2 = await axios.get(url, {params: params2})\n      const { results:recommendations1 } = recommendationData.data;\n      const { results:recommendations2 } = recommendationData2.data;\n      const recommendations = [...recommendations1,...recommendations2];\n\n      this.props.setRecommendations(recommendations)\n  \n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  renderBlank(){\n    return ({'backgroundImage':'none'})\n  }\n  renderBackground(){\n    const { backdrop_path } = this.props.selectedMovie;\n    const backgroundImage = config.getBackdropUrl(backdrop_path);\n    return ( {'backgroundImage': `url(${backgroundImage})`} )\n  }\n  renderSearchResults() {\n    const { results } = this.state;\n    const resultsHtml = results.map(result => {\n      const {\n        id,\n        title,\n        release_date: date\n      } = result;\n      const year = parseInt(date);\n\n      return (\n        <option key={id} data-value={id} value={`${title} (${year})`} /> \n      )\n    })\n    return resultsHtml;\n  }\n  render() {\n    return (\n      <div className={this.props.containerClass }>\n        <div className=\"background\" style={ this.props.selectedMovie !== null ? this.renderBackground() : this.renderBlank() }></div>\n        <input\n          placeholder={ this.props.placeholder }\n          type=\"text\"\n          list={this.autoCompleteid }\n          onChange={ this.changeQuery }\n          value={ this.state.q }\n        /> \n        <datalist className=\"movieAutocomplete\" id={ this.autoCompleteid }>\n        { this.renderSearchResults() }\n        </datalist> \n      </div>\n    )\n  }\n}\n\nexport default MovieSelect;","import React, { Component } from 'react';\nimport config from '../constants';\n\nimport Header from './Header';\nimport MovieSelect from './MovieSelect';\n\nclass MovieForm extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      selectedMovieA: null,\n      selectedMovieB: null,\n      recommendationsA: [],\n      recommendationsB: [],\n      recommendedMovie: null\n    }\n\n    this.setMovieChoiceA = this.setMovieChoiceA.bind(this)\n    this.setMovieChoiceB = this.setMovieChoiceB.bind(this)\n    this.setRecommendationsA = this.setRecommendationsA.bind(this)\n    this.setRecommendationsB = this.setRecommendationsB.bind(this)\n  }\n  componentDidUpdate(){\n    if(this.state.recommendationsA.length && this.state.recommendationsB.length && this.state.recommendedMovie === null){\n      this.recommend();\n    }\n  }\n  setMovieChoiceA(movie){\n    this.setState({\n      selectedMovieA: movie\n    })\n  }\n  setMovieChoiceB(movie){\n    this.setState({\n      selectedMovieB: movie\n    })\n  }\n  setRecommendationsA(recommendations){\n    this.setState({\n      recommendationsA: recommendations\n    })\n  }\n  setRecommendationsB(recommendations){\n    this.setState({\n      recommendationsB: recommendations\n    })\n  }\n  loadingRecommendation(){\n    return(\n      <div className=\"loading-recommendation\">Loading</div>\n    )\n  }\n  getSharedReccomendations(a,b){\n    const matches = [];\n    a.forEach((e1) => b.forEach((e2) => {\n      if( JSON.stringify(e1) === JSON.stringify(e2)) {\n        matches.push(e1);\n      }\n    }))\n\n    if(!matches.length){\n      // if they have no matches \n      matches.push(a[0])\n      matches.push(b[0])\n    }\n    return matches\n  }\n  _reset = event => {\n    event.preventDefault();\n    this.setState({\n      selectedMovieA: null,\n      selectedMovieB: null,\n      recommendationsA: [],\n      recommendationsB: [],\n      recommendedMovie: null\n    })\n    const headerPanel = document.querySelector(\"header\");\n    headerPanel.scrollIntoView();\n  }\n  recommend() {\n    console.log(\"analyzing..\")\n\n    const { recommendationsA, recommendationsB} = this.state;\n    const matches = this.getSharedReccomendations(recommendationsA, recommendationsB)\n\n    this.setState({\n      recommendedMovie: matches[0]\n    })\n  }\n  renderRecommendation(){\n    const recommendationPanel = document.getElementById(\"recommendation\");\n    recommendationPanel.scrollIntoView();\n\n    const movie = this.state.recommendedMovie;\n    const posterUrl = config.getPosterUrl(movie.poster_path)\n\n    return (\n      <div className=\"result\">\n        <h3>You should watch:</h3>\n        <img src={ posterUrl } alt={movie.title}/>\n        <h2>{movie.title}</h2>\n        <p>{ movie.overview }</p>\n      </div>\n    )\n  }\n  render(){\n    return(\n      <form>\n        <div className=\"panel\">\n          <Header \n          containerClass={\"container\"}/>\n        </div>\n        <div className=\"panel panel-half\" id=\"selectOne\">\n          <MovieSelect\n          id={1}\n          placeholder={\"Pick a Movie\"}\n          setMovieChoice={ this.setMovieChoiceA }\n          setRecommendations={ this.setRecommendationsA }\n          selectedMovie={ this.state.selectedMovieA }\n          containerClass={\"moviePicker container container-red\"}\n          />\n        </div>\n        <div className=\"panel panel-half\">\n          <MovieSelect\n          id={2} \n          placeholder={\"Pick another Movie\"}\n          setMovieChoice={ this.setMovieChoiceB }\n          setRecommendations={ this.setRecommendationsB }\n          selectedMovie={ this.state.selectedMovieB }\n          containerClass={\"moviePicker container container-cyan\"}\n          />\n        </div>\n        <div className=\"panel\" id=\"recommendation\">\n          <div className=\"container\">\n            { this.state.recommendedMovie !== null ? this.renderRecommendation(): this.loadingRecommendation() }\n            <div className=\"reset-container\">\n              <button type=\"button\" className=\"reset-button\" onClick={ (event) => { this._reset(event)} }>Reset</button>\n            </div>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default MovieForm;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return(\n    <footer>\n      <p>&copy; Steven Moran 2019</p>\n    </footer>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport appConfig from './constants.js';\n\nimport './App.scss';\n\nimport MovieForm from './components/MovieForm';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  componentDidMount() {\n    //this.getConfig();\n  }\n  async getConfig() {\n\n    try {\n      const qUrl = `${appConfig.API_URL}/configuration`;\n      const qParams = {\n        crossDomain: true,\n        api_key: appConfig.API_TOKEN\n      }\n      const configData = await axios.get(qUrl, {params: qParams})\n\n      console.log(configData)\n\n    } catch(e) {\n      console.error(e.message)\n    }\n  }\n  render() {\n    return (\n      <div>\n        <MovieForm />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}